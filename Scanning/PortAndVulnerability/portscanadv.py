#!/usr/bin/env python3
# -*- coding: utf-8 -*-

"""
Port Scan using Threads
@filename portscanadv.py
@version 0.01 (python ver 3.8.2)
@author Douglas Quintiliano dos Santos
"""

# Libraries used
# https://docs.python.org/3/library/socket.html

# Dependencies
from socket import *
import optparse
from threading import *

RESET, GREEN, RED = '\033[0m', '\033[92m', '\033[91m' 

def connScan(tgtHost, tgtPort):
  try:
    sock = socket(AF_INET, SOCK_STREAM)
    sock.connect((tgtHost, tgtPort))
    print('[{}+{}] {}/tcp \t[{}Open{}]'.format(GREEN,RESET,tgtPort,GREEN,RESET))
  except:
    print('[{}-{}] {}/tcp \t[{}Closed{}]'.format(RED,RESET,tgtPort,RED,RESET))
  finally:
    sock.close()


def portScan(tgtHost, tgtPorts):
  try:
    tgtIP = gethostbyname(tgtHost)
  except:
    print("Unknown Host {}".format(tgtHost))
  try:
    tgtName = gethostbyaddr(tgtIP)
    print('[+] Scan Results for: ' + tgtName[0])
  except:
    print('[+] Scan Results for: ' + tgtIP)
  setdefaulttimeout(0.5)
  for tgtPort in tgtPorts:
    t = Thread(target=connScan, args=(tgtHost, int(tgtPort)))
    t.start()

def main():
  parser = optparse.OptionParser('Usage of program: ' + '-H <target host> -p <target port>')
  parser.add_option('-H', dest='tgtHost', type='string', help='specify target host')
  parser.add_option('-p', dest='tgtPort', type='string', help='specify target ports separated by comma')
  (options, args) = parser.parse_args()
  tgtHost = options.tgtHost
  tgtPorts = str(options.tgtPort).split(',')
  if (tgtHost == None) | (tgtPorts[0] == None):
    print(parser.usage)
    exit(0)

  portScan(tgtHost, tgtPorts)



if __name__ == '__main__':
  main()









# # Colors
# RESET, GREEN, RED = '\033[0m', '\033[92m', '\033[91m' 

# # define the default timeout for the connection, without this option that connection will be hanging for a long time
# socket.setdefaulttimeout(0.5) 

# # Function to start the scanner
# def portscanner(port):
#   with socket.socket(socket.AF_INET, socket.SOCK_STREAM) as s:
#     if s.connect_ex((host, port)):
#       print("{} [!!] Port {} is closed {}".format(RED, port, RESET))
#     else:
#       print("{} [+] Port {} is opened {}".format(GREEN, port, RESET))


# # Get the information about the host to scan
# host = input("[*] Enter the Host to Scan: ")
# # port = int(input("[*] Enter the Port to Scan: "))

# for port in range(1,100, 5):
#   portscanner(port)